function GetLatestCommit() {
    # Configurable variables
    GERRIT_USERNAME="REPLACE_WITH_GERRIT_USERNAME" # Update this with your Gerrit username
    GERRIT_SERVER_URL="REPLACE_WITH_GERRIT_SERVER_URL" # Update this with your Gerrit server URL
    GERRIT_SERVER_HOST="REPLACE_WITH_GERRIT_SERVER_HOST" # Update with your Gerrit server's hostname
    GERRIT_SSH_PORT="REPLACE_WITH_GERRIT_SSH_PORT" # Update with your Gerrit server's SSH port, typically 29418

    # Get current and parent directory names to form a project-like string
    CURRENT_DIR=$(basename "$PWD")
    PARENT_DIR=$(basename "$(dirname "$PWD")")
    PROJECT_FILTER="${PARENT_DIR}/${CURRENT_DIR}"

    # Fetch the list of your open changes from Gerrit
    CHANGES_JSON=$(curl -s "${GERRIT_SERVER_URL}/changes/?q=is:open+owner:${GERRIT_USERNAME}&o=CURRENT_REVISION" | sed '1d')

    # Filter changes matching the project structure of current and parent directories
    MATCHES=$(echo "${CHANGES_JSON}" | jq -r --arg project_filter "$PROJECT_FILTER" '.[] | select(.project | contains($project_filter))')

    if [[ -z "$MATCHES" ]]; then
        echo "No changes found matching the project structure $PROJECT_FILTER. Displaying all changes."
        FILTERED_CHANGES_JSON="${CHANGES_JSON}"
    else
        FILTERED_CHANGES_JSON=$(echo "${MATCHES}" | jq -s '.')
    fi

    # Parse the filtered JSON to get change details and use fzf to select a commit
    SELECTED_COMMIT=$(echo "${FILTERED_CHANGES_JSON}" | jq -r '.[] | "\(._number)\t[\(.project)] \(.subject) \(.revisions | to_entries[0].value.ref)"' | fzf --height 40% --reverse)

    # Proceed if a commit is selected
    if [[ ! -z "$SELECTED_COMMIT" ]]; then
        PROJECT=$(echo "${SELECTED_COMMIT}" | awk '{print $2}' | tr -d '[]')
        REF=$(echo "${SELECTED_COMMIT}" | awk '{print $NF}')
        SUBJECT=$(echo "${SELECTED_COMMIT}" | awk '{$1=$1; print $0}' | cut -f3- -d$'\t')
        GIT_COMMAND="git fetch ssh://${GERRIT_USERNAME}@${GERRIT_SERVER_HOST}:${GERRIT_SSH_PORT}/${PROJECT} ${REF}"
        echo "Executing: ${GIT_COMMAND}"
        eval "${GIT_COMMAND}"
        TICKET=$(echo "${SUBJECT}" | grep -oE '[A-Z]+-[0-9]+')
        BRANCH_NAME="feature/${TICKET}"
        
        # Check if TICKET was found; if not, use a default branch name
        if [[ -z "$TICKET" ]]; then
            echo "No ticket number found in the commit message. Using a default branch name."
            BRANCH_NAME="feature/$(date +%Y%m%d%H%M%S)"
        fi
        
        # Check if the branch already exists
        if git rev-parse --verify "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "Branch $BRANCH_NAME already exists. Checking out and rebasing with the fetched changes."
            git checkout "$BRANCH_NAME"
            git rebase FETCH_HEAD
        else
            echo "Creating and checking out new branch: ${BRANCH_NAME}"
            git checkout -b "${BRANCH_NAME}" FETCH_HEAD
        fi
    else
        echo "No commit selected. Exiting."
    fi
}
