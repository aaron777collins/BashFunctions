## START of rac [--reselect] <commit message>

# refreshes moabs and Checks out commits on specified repos with the specified texts
function RefreshAndCheckout() {
    (
        RAC_CONFIG_DIR="$HOME/.config/rac"
        RAC_CONFIG_FILE="$RAC_CONFIG_DIR/config"

        # Utility functions for printing in colors
        function print_yellow() {
            echo -e "\033[1;33m$1\033[0m"
        }

        function print_green() {
            echo -e "\033[1;32m$1\033[0m"
        }

        # Lets the user select repos from the current directory and sub-folders
        function findrepos() {
            # Default depth is 3
            local depth=3

            # Check if --depth flag is provided
            if [[ "$1" == "--depth" && -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
                depth="$2"
                shift 2
            fi

            local repos=$(find . -maxdepth "$depth" -type d -name ".git" | sed 's|/\.git$||' | fzf --height 70% --multi --reverse)
            
            if [[ -n "$repos" ]]; then
                echo "$repos"
            fi
        }

        function create_config() {
            mkdir -p "$RAC_CONFIG_DIR"
            touch "$RAC_CONFIG_FILE"
        }

        function save_repos() {
            local dir=$(pwd)
            local repos=$1
            create_config
            sed -i "\|^$dir:|d" "$RAC_CONFIG_FILE" # Remove any existing entry for the directory
            echo "$dir:$(echo "$repos" | tr '\n' ' ')" >> "$RAC_CONFIG_FILE"
        }

        function load_repos() {
            local dir=$(pwd)
            if [[ -f "$RAC_CONFIG_FILE" ]]; then
                grep "^$dir:" "$RAC_CONFIG_FILE" | cut -d':' -f2- | tr ' ' '\n'
            else
                echo ""
            fi
        }

        function select_repos() {
            local repos=$(findrepos)
            if [[ -n "$repos" ]]; then
                save_repos "$repos"
            fi
            echo "$repos"
        }

        ## Updated to v2 (not uploaded yet)
        # Gets your latest commits and lets you check them out (someone else wrote this mostly)
        function GetLatestCommit() {
            # Set your Gerrit username and Gerrit server URL
            GERRIT_USERNAME="your_username" # Update with your actual username
            GERRIT_SERVER="https://your.gerrit.server" # Update with your Gerrit server URL

            # Get current and parent directory names to form a project-like string
            CURRENT_DIR=$(basename "$PWD")
            PARENT_DIR=$(basename "$(dirname "$PWD")")
            PROJECT_FILTER="${PARENT_DIR}/${CURRENT_DIR}"

            # Fetch the list of your open changes from Gerrit
            CHANGES_JSON=$(curl -s "${GERRIT_SERVER}/changes/?q=is:open+owner:${GERRIT_USERNAME}&o=CURRENT_REVISION" | sed '1d')

            # Filter changes matching the project structure of current and parent directories
            MATCHES=$(echo "${CHANGES_JSON}" | jq -r --arg project_filter "$PROJECT_FILTER" '.[] | select(.project | contains($project_filter))')

            if [[ -z "$MATCHES" ]]; then
                echo "No changes found matching the project structure $PROJECT_FILTER. Displaying all changes."
                FILTERED_CHANGES_JSON="${CHANGES_JSON}"
            else
                FILTERED_CHANGES_JSON=$(echo "${MATCHES}" | jq -s '.')
            fi


            # We want to filter the following fzf options with a fuzzy search all the arguments following the command (case insensitive). If only one argument is passed, it will be used as is.
            argsToSearchFor=$(echo "$*")
            SELECTED_COMMIT=""
            FZF_OPTIONS="--reverse"

            if [[ -z "$argsToSearchFor" ]]; then
                # Parse the filtered JSON to get change details and use fzf to select a commit (not filtered)
                SELECTED_COMMIT=$(echo "${FILTERED_CHANGES_JSON}" | jq -r '.[] | "\(._number)\t[\(.project)] \(.subject) \(.revisions | to_entries[0].value.ref)"' | fzf $FZF_OPTIONS)
            else
                echo "Filtering commits by: $argsToSearchFor"
                # Parse the filtered JSON to get change details and use fzf to select a commit (filtered by arguments) (case insensitive)
                SELECTED_COMMIT=$(echo "${FILTERED_CHANGES_JSON}" | jq -r --arg argsToSearchFor "$argsToSearchFor" '.[] | "\(._number)\t[\(.project)] \(.subject) \(.revisions | to_entries[0].value.ref)"' | fzf $FZF_OPTIONS --filter="$argsToSearchFor" --ansi)
            fi

            # Proceed if a commit is selected
            if [[ ! -z "$SELECTED_COMMIT" ]]; then
                echo "Commit selected: ${SELECTED_COMMIT}"
                PROJECT=$(echo "${SELECTED_COMMIT}" | awk '{print $2}' | tr -d '[]')
                REF=$(echo "${SELECTED_COMMIT}" | awk '{print $NF}')
                SUBJECT=$(echo "${SELECTED_COMMIT}" | awk '{$1=$1; print $0}' | cut -f3- -d$'\t')
                GIT_COMMAND="git fetch ssh://${GERRIT_USERNAME}@your.gerrit.server:29418/${PROJECT} ${REF}"
                echo "Executing: ${GIT_COMMAND}"
                eval "${GIT_COMMAND}"
                TICKET=$(echo "${SUBJECT}" | grep -oE '[A-Z]+-[0-9]+')
                BRANCH_NAME="feature/${TICKET}"
                
                # Check if TICKET was found; if not, use a default branch name
                if [[ -z "$TICKET" ]]; then
                    echo "No ticket number found in the commit message. Using a default branch name."
                    BRANCH_NAME="feature/$(date +%Y%m%d%H%M%S)"
                fi
                
                # Check if the branch already exists
                if git rev-parse --verify "$BRANCH_NAME" >/dev/null 2>&1; then
                    echo "Branch $BRANCH_NAME already exists. Checking out and rebasing with the fetched changes."
                    git checkout "$BRANCH_NAME"
                    git rebase FETCH_HEAD
                else
                    echo "Creating and checking out new branch: ${BRANCH_NAME}"
                    git checkout -b "${BRANCH_NAME}" FETCH_HEAD
                fi
            else
                echo "No commit selected. Exiting."
            fi
        }

        if [[ -z "$1" ]]; then
            echo "rac: Refresh MOABs and check out commits on selected repositories."
            echo "Usage: rac [--reselect] <commit-message>"
            echo "  --reselect      Reselect repositories and run the command."
            echo "  <commit-message> The commit message to search for in each selected repository."
            return
        fi

        if [[ "$1" == "--reselect" ]]; then
            shift
            repos=$(select_repos)
        else
            repos=$(load_repos)
            if [[ -z "$repos" ]]; then
                repos=$(select_repos)
            fi
        fi

        local original_dir=$(pwd)

        if [[ -n "$repos" ]]; then
            print_yellow "Selected repos:"
            echo "$repos"

            print_yellow "Checking out master and restoring the workspace in all repos."
            gwe git checkout master
            gwe git restore .
            gwe git clean -fd

            print_yellow "Refreshing MOABs"
            cdt moab refresh

            # For each repo, it will use glc and pass the arguments
            while IFS= read -r repo; do
                print_yellow "\nChecking out commits with the text ${GREY}$*${YELLOW} in repo: ${GREY}$repo${YELLOW}"
                (
                    cd "$repo" || exit
                    glc "$@"
                    cd "$original_dir" || exit
                )
            done <<< "$repos"

            print_green "\nFinished refreshing MOABs and checking out commits in the selected repos."
        else
            print_yellow "No repos selected. Exiting."
        fi
    )
}

export -f RefreshAndCheckout
alias rac="RefreshAndCheckout"

# completion function for rac [--reselect] <commit message>
_rac_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--reselect"

    # Should complete the --reselect option if its the 1st argument
    if [[ ${cur} == -* ]]; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # Otherwise, don't complete anything
    return 0
}

complete -F _rac_completion RefreshAndCheckout
complete -F _rac_completion rac

# END OF rac
