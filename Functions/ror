# Runs the specified command in all selected repos
function runonrepos() {
    (
        ROR_CONFIG_DIR="$HOME/.config/ror"
        ROR_CONFIG_FILE="$ROR_CONFIG_DIR/config"

        # Utility functions for printing in colors
        function print_yellow() {
            echo -e "\033[1;33m$1\033[0m"
        }

        function print_green() {
            echo -e "\033[1;32m$1\033[0m"
        }

        # Lets the user select repos from the current directory and sub-folders
        function findrepos() {
            # Default depth is 3
            local depth=3

            # Check if --depth flag is provided
            if [[ "$1" == "--depth" && -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
                depth="$2"
                shift 2
            fi

            local repos=$(find . -maxdepth "$depth" -type d -name ".git" | sed 's|/\.git$||' | fzf --height 70% --multi --reverse)
            
            if [[ -n "$repos" ]]; then
                echo "$repos"
            fi
        }

        function create_config() {
            mkdir -p "$ROR_CONFIG_DIR"
            touch "$ROR_CONFIG_FILE"
        }

        function save_repos() {
            local dir=$(pwd)
            local repos=$1
            create_config
            sed -i "\|^$dir:|d" "$ROR_CONFIG_FILE" # Remove any existing entry for the directory
            echo "$dir:$(echo "$repos" | tr '\n' ' ')" >> "$ROR_CONFIG_FILE"
        }

        function load_repos() {
            local dir=$(pwd)
            if [[ -f "$ROR_CONFIG_FILE" ]]; then
                grep "^$dir:" "$ROR_CONFIG_FILE" | cut -d':' -f2- | tr ' ' '\n'
            else
                echo ""
            fi
        }

        function select_repos() {
            local repos=$(findrepos)
            if [[ -n "$repos" ]]; then
                save_repos "$repos"
            fi
            echo "$repos"
        }

        if [[ -z "$1" ]]; then
            echo "ror: Run commands on selected repositories."
            echo "Usage: ror [--reselect] <command>"
            echo "  --reselect   Reselect repositories and run the command."
            echo "  <command>    The command to run on each selected repository."
            return
        fi

        if [[ "$1" == "--reselect" ]]; then
            shift
            repos=$(select_repos)
        else
            repos=$(load_repos)
            if [[ -z "$repos" ]]; then
                repos=$(select_repos)
            fi
        fi
        
        local original_dir=$(pwd)
        
        if [[ -n "$repos" ]]; then
            print_yellow "Selected repos:"
            echo "$repos"
            
            while IFS= read -r repo; do
                if [[ "$repo" != "Selected repos:" && -n "$repo" ]]; then
                    print_yellow "\nRunning $* in repo: $repo"
                    (
                        cd "$repo" || exit
                        eval "$@"
                        cd "$original_dir" || exit
                    )
                fi
            done <<< "$repos"
        fi
        
        print_green "\nFinished running the command(s) in the selected repos."
    )
}

export -f runonrepos
alias ror="runonrepos"

# Completion function for ror
_ror_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--reselect"

    # Options completion
    if [[ ${cur} == -* ]]; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # Subcommand completion for the first argument
    if [[ ${COMP_CWORD} -eq 1 ]]; then
        local subcommands="orepo glc ror rac sfc cdrepo cdw cdwprep cdwridersln cdwprepridersln cprs fzf grep jq jid ridersln prepworkspace openrepos openrepo findrepo findrepos cdwprep cdwp cdwridersln cdwprepridersln cprs CheckoutTicket nunitfixes RefreshAndCheckout runonrepos git gitextensions gw gwe cdt"
        COMPREPLY=( $(compgen -W "${subcommands}" -- ${cur}) )
        return 0
    fi

    # Dynamic argument completion for the command given as the first argument
    if [[ ${COMP_CWORD} -ge 2 ]]; then
        local cmd="${COMP_WORDS[1]}"
        
        # Check if there's a completion function for the command
        if type "_ror_${cmd}_completion" &>/dev/null; then
            "_ror_${cmd}_completion"
        else
            # Fallback to generic command completion if no specific completion function is found
            COMPREPLY=( $(compgen -A file -- ${cur}) )
        fi
        
        return 0
    fi
}

# Specific completion for ror git subcommands
_ror_git_completion() {
    local cur prev subcommands
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    subcommands="add branch checkout commit diff fetch init log merge pull push rebase reset status"

    if [[ ${COMP_CWORD} -eq 2 ]]; then
        COMPREPLY=( $(compgen -W "${subcommands}" -- ${cur}) )
        return 0
    elif [[ ${COMP_CWORD} -eq 3 ]]; then
        if [[ ${prev} == "checkout" ]]; then
            COMPREPLY=( $(compgen -A file -- ${cur}) )
            return 0
        fi
    fi
}

# Register the completion function
complete -F _ror_completion ror
